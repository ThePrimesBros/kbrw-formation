const util = require("util");

// recursively remove non important properties of babel node or path
function cleanObjectToLog(obj, depth = 0) {
  if (!obj) {
    return obj;
  }
  if (depth > 6) {
    return "...";
  }
  const toRemove = [
    "hub",
    "contexts",
    "parent",
    "parentPath",
    "shouldSkip",
    "shouldStop",
    "removed",
    "state",
    "opts",
    "trailingComments",
    "leadingComments",
    "innerComments",
    "start",
    "end",
    "loc",
    "raw",
    "extra",
    "typeAnnotation",
    "scope",
    "inList",
    "uid",
    "key",
    "computed",
    "parentKey",
    "container",
    "data",
    "context",
    "skipKeys",
    "listKey",
    "selfClosing",
  ];

  if (Array.isArray(obj)) {
    return obj.map((o) => cleanObjectToLog(o, depth + 1));
  }

  return Object.keys(obj).reduce((acc, key) => {
    if (!toRemove.includes(key)) {
      if (typeof obj[key] === "object") {
        acc[key] = cleanObjectToLog(obj[key], depth + 1);
      } else {
        acc[key] = obj[key];
      }
    }
    return acc;
  }, {});
}

function logPath(path) {
  console.log(
    util.inspect(cleanObjectToLog(path), {
      showHidden: false,
      depth: null,
      colors: true,
    })
  );
}

module.exports = {
  logPath,
};
